displacements_graph(mappings = mappings,  # Looks for nodes inside mappin mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization porposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
check()
library(sompack.v01)
displacements_graph(mappings = mappings,  # Looks for nodes inside mappin mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization porposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
check()
library(sompack.v01)
displacements_graph(mappings = mappings,  # Looks for nodes inside mappin mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization porposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
check()
library(sompack.v01)
displacements_graph(mappings = mappings,  # Looks for nodes inside mappin mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization porposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
chec
check()
pwd()
library(sompack.v01)
install.packages("learnr")
library(roxygen2)
library(devtools)
?create_mappings
devtools::test()
test_check("sompack.v01")
library(testthat)
test_check("sompack.v01")
check()
check()
check()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(1:10)
plot(10:1)
library(evolSOM)
remove.packages("sompack.v01")
?evolSOM
?scale_species
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(available)
install.packages(available)
install.packages("available")
library(available)
available(aweSOM)
available("aweSOM")
available("evolSOM")
check()
library(devtools)
check()
check()
datSOM <- read.csv("../sompack_build/data/datSOM.csv", header = TRUE,
check.names = F,
sep= ",")
View(datSOM)
rownames(datSOM) <- datSOM[,1] #Use first column with names as row names
datSOM <- datSOM[,-1] #Remove column don't needed
usethis::use_data(datSOM)
load("C:/Users/santi/Dropbox (Personal)/Postdoc IAL-SINC/Postdoc/R/paquete/evolSOM/data/datSOM.rda")
load("C:/Users/santi/Dropbox (Personal)/Postdoc IAL-SINC/Postdoc/R/paquete/evolSOM/data/datSOM.rda")
#Traits names and information (tags)
classSOM <- read.csv("../sompack_build/data/classSOM.csv", header = TRUE,
check.names = F,
sep= ",")
classSOM <- classSOM[,-1] #First column must be name of feature/gen
usethis::use_data(classSOM)
library(evolSOM)
load(datSOM)
load("C:/Users/santi/Dropbox (Personal)/Postdoc IAL-SINC/Postdoc/R/paquete/evolSOM/data/datSOM.rda")
evolSOM::datSOM
load(evolSOM::datSOM)
datSOM
x <- datSOM
use_gpl_license()
check()
x<- datSOM
document()
check()
check()
browseVignettes()
datSOM <- read.csv("../sompack_build/data/datSOM.csv", header = TRUE,
check.names = F,
sep= ",")
rownames(datSOM) <- datSOM[,1] #Use first column with names as row names
datSOM <- datSOM[,-1] #Remove column don't needed
rm(x)
View(datSOM)
library(ggplot2)
library(stringr)
library(kohonen)
library(aweSOM)
TMM <- read.table( "data/TMM.og.txt", sep='', header=TRUE)
TMM <- TMM[ , order(names(TMM))]
TMM.means <- as.data.frame(matrix(nrow = nrow(TMM), ncol = 12))
names(TMM.means) <-c("ALF1", "ALF3", "ALF5", "ALF7",
"HAF1", "HAF3", "HAF5", "HAF7",
"RPF1", "RPF3", "RPF5", "RPF7"
)
row.names(TMM.means) <- row.names(TMM)
for (i in 1:nrow(TMM.means)){
for(j in 1:12){
TMM.means[i,j] <- mean(as.numeric(TMM[i,(j*3-2):(j*3)]))
}
}
head(TMM.means)
#Ordenar C, PK, C3
TMM.means <- TMM.means[ , order(c("ALF1", "ALF3", "ALF5", "ALF7",
"RPF1", "RPF3", "RPF5", "RPF7",
"HAF1", "HAF3", "HAF5", "HAF7"))]
names(TMM.means) <- c("C4_S1", "C4_S3", "C4_S5", "C4_S7",
"PK_S1", "PK_S3", "PK_S5", "PK_S7",
"C3_S1", "C3_S3", "C3_S5", "C3_S7")
#Import data
datAnatomy.Ha <- read.csv("data/datAnatomy.Ha.csv", header = TRUE, sep= ";")
row.names(datAnatomy.Ha) <- datAnatomy.Ha$Muestra
#Delete columns  I won't use
datAnatomy.Ha <- datAnatomy.Ha[,-c(1, 17, 18)]
names(datAnatomy.Ha) <-    c("VB Distance","VB Density", "1° VB / Total VB", "VB Diameter",
"VB Area %", "IBS Cell size","IBS Area %", "OBS Cell size",
"OBS Area %", "M Cell size", "Sv*", "Sb*",
"Leaf Size", "1° VB Density", "2° VB Density")
# Calculate means for each fragment
datAnatomy.Ha.means <- as.data.frame(matrix(nrow = 4, ncol = 15))
names(datAnatomy.Ha.means) <- names(datAnatomy.Ha)
row.names(datAnatomy.Ha.means) <-c("C3_S1", "C3_S3", "C3_S5", "C3_S7")
for (i in 1:length(datAnatomy.Ha.means)){
datAnatomy.Ha.means[1,i] <- mean(datAnatomy.Ha[1:10,i],  na.rm = TRUE)
datAnatomy.Ha.means[2,i] <- mean(datAnatomy.Ha[11:20,i], na.rm = TRUE)
datAnatomy.Ha.means[3,i] <- mean(datAnatomy.Ha[21:30,i], na.rm = TRUE)
datAnatomy.Ha.means[4,i] <- mean(datAnatomy.Ha[31:40,i], na.rm = TRUE)
}
datAnatomy.Ha.means
#Import data
datAnatomy.Rp <- read.csv("data/datAnatomy.Rp.csv", header = TRUE, sep= ";")
row.names(datAnatomy.Rp) <- datAnatomy.Rp$Muestra
#Delete columns  I won't use
datAnatomy.Rp <- datAnatomy.Rp[,-c(1, 17, 18)]
names(datAnatomy.Rp) <- c("VB Distance","VB Density", "1° VB / Total VB", "VB Diameter",
"VB Area %", "IBS Cell size","IBS Area %", "OBS Cell size",
"OBS Area %", "M Cell size", "Sv*", "Sb*",
"Leaf Size", "1° VB Density", "2° VB Density")
# Calculate means for each fragment
datAnatomy.Rp.means <- as.data.frame(matrix(nrow = 4, ncol = 15))
names(datAnatomy.Rp.means) <- names(datAnatomy.Rp)
row.names(datAnatomy.Rp.means) <-c("PK_S1", "PK_S3", "PK_S5", "PK_S7")
for (i in 1:length(datAnatomy.Rp.means)){
datAnatomy.Rp.means[1,i] <- mean(datAnatomy.Rp[1:10,i],  na.rm = TRUE)
datAnatomy.Rp.means[2,i] <- mean(datAnatomy.Rp[11:20,i], na.rm = TRUE)
datAnatomy.Rp.means[3,i] <- mean(datAnatomy.Rp[21:30,i], na.rm = TRUE)
datAnatomy.Rp.means[4,i] <- mean(datAnatomy.Rp[31:40,i], na.rm = TRUE)
}
datAnatomy.Rp.means
#Import data
datAnatomy.Al <- read.csv("data/datAnatomy.Al.csv", header = TRUE, sep= ";")
row.names(datAnatomy.Al) <- datAnatomy.Al$Muestra
#Delete column  I won't use
datAnatomy.Al <- datAnatomy.Al[,-c(1, 17)]
names(datAnatomy.Al) <- c("VB Distance","VB Density", "1° VB / Total VB", "VB Diameter",
"VB Area %", "IBS Cell size","IBS Area %", "OBS Cell size",
"OBS Area %", "M Cell size", "Sv*", "Sb*",
"Leaf Size", "1° VB Density", "2° VB Density")
# Calculate means for each fragment
datAnatomy.Al.means <- as.data.frame(matrix(nrow = 4, ncol = 15))
names(datAnatomy.Al.means) <- names(datAnatomy.Al)
row.names(datAnatomy.Al.means) <-c("C4_S1", "C4_S3", "C4_S5", "C4_S7")
for (i in 1:length(datAnatomy.Al.means)){
datAnatomy.Al.means[1,i] <- mean(datAnatomy.Al[1:10,i],  na.rm = TRUE)
datAnatomy.Al.means[2,i] <- mean(datAnatomy.Al[11:20,i], na.rm = TRUE)
datAnatomy.Al.means[3,i] <- mean(datAnatomy.Al[21:30,i], na.rm = TRUE)
datAnatomy.Al.means[4,i] <- mean(datAnatomy.Al[31:40,i], na.rm = TRUE)
}
datAnatomy.Al.means
#Reemplazar NA por ceros:
datAnatomy.Al.means$`OBS Cell size` <- 0
datAnatomy.Al.means$`OBS Area %` <- 0
View(datSOM)
options(scipen = 100)
options(scipen = 1000)
View(datSOM)
options(scipen = 10)
View(datSOM)
datAnatomy.means <- t(rbind(datAnatomy.Al.means,datAnatomy.Rp.means,datAnatomy.Ha.means))
especie.C4 <- c(1,1,1,1,0,0,0,0,0,0,0,0)
especie.PK <- c(0,0,0,0,1,1,1,1,0,0,0,0)
especie.C3 <- c(0,0,0,0,0,0,0,0,1,1,1,1)
datAnatomy.means <- rbind(datAnatomy.means, especie.C4,especie.PK,especie.C3)
datSOM <- rbind(datAnatomy.means, TMM.means)
View(datSOM)
clases.SOM <- as.data.frame(matrix(nrow = (15+3+13936), ncol = 4))
names(clases.SOM) <- c("Feature", "Class1", "Class2", "Class3")
clases.SOM$Feature <- c(row.names(datSOM[1:18,]),row.names(TMM))
load(file="data/orthogroups_AlRpHa_13936_TPM.RData")
#clase para fenotipos : hv, cv, otro
clases.SOM[1:15,2] <- "PhT"
fenotipo.clase2 <- c(rep("vb", 5), rep("bs", 4), rep("other", 4), "vb", "vb")
clases.SOM[16:18,2] <- "species"
especie.clase2 <- c("C4", "PK", "C3")
#clase para Factores de transcripcion
ft.clase2 <- Annotation.TPM.og$TF
clases.SOM$Class2 <- c(fenotipo.clase2,especie.clase2,ft.clase2)
clases.SOM$Class2[clases.SOM$Class2==''] <- NA
for (i in 19:nrow(clases.SOM)){
if (!is.na(clases.SOM[i,3]))
clases.SOM[i,2] <- "TF"
}
#Clase para genes biosintesis de suberina (11)
listofgenes <- c("OG0000296", "OG0000610", "OG0004343", "OG0004648","OG0005527","OG0006046",
"OG0006384", "OG0008734","OG0013822", "OG0014877", "OG0016849")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "suberin biosynthesis"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "cell wall development"
#Clase para genes biosintesis de celulosa (130)
listofgenes <- c("OG0000052", "OG0000057", "OG0000100", "OG0000113", "OG0000124", "OG0000153","OG0000211", "OG0000213","OG0000236", "OG0000279", "OG0000304", "OG0000307", "OG0000314", "OG0000575", "OG0000585", "OG0000648","OG0000758", "OG0000877", "OG0000908", "OG0000949", "OG0001085", "OG0001090", "OG0001170", "OG0001192","OG0001240", "OG0001313", "OG0001486", "OG0001664", "OG0001803", "OG0001888", "OG0001890", "OG0002061","OG0002113", "OG0002134", "OG0002217", "OG0002283", "OG0002290", "OG0002295", "OG0002366","OG0002379","OG0002383", "OG0002550", "OG0002635", "OG0002865", "OG0002917", "OG0003098", "OG0003232", "OG0003248", "OG0003254", "OG0003379", "OG0003724", "OG0003797", "OG0004035", "OG0004148", "OG0004201", "OG0004387", "OG0004421", "OG0004537", "OG0004608", "OG0004990", "OG0005111", "OG0005322", "OG0005329", "OG0005350", "OG0005524", "OG0005534", "OG0005797", "OG0006062", "OG0006152", "OG0006447", "OG0006462", "OG0006514", "OG0007756", "OG0008097", "OG0008792", "OG0009044", "OG0009081", "OG0010400", "OG0010888", "OG0011085",
"OG0011209", "OG0011379", "OG0011399", "OG0011420", "OG0011509", "OG0011529", "OG0011680", "OG0011790", "OG0012011", "OG0012156", "OG0012669", "OG0012671", "OG0012895", "OG0012923", "OG0012988", "OG0013023", "OG0013026", "OG0013692", "OG0013758", "OG0013835", "OG0013913", "OG0013915", "OG0014069", "OG0014158", "OG0014317", "OG0014318", "OG0014378", "OG0014482", "OG0014542", "OG0014587", "OG0014599", "OG0014613", "OG0014677", "OG0015323", "OG0016004", "OG0016073", "OG0016215", "OG0016301", "OG0016365", "OG0016384", "OG0016488", "OG0016530", "OG0016682", "OG0016782", "OG0016983", "OG0016994", "OG0017109", "OG0017158", "OG0017252", "OG0017266")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "cellulose biosynthesis"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "cell wall development"
#Clase para genes biosintesis de lignina (87)
listofgenes <- c("OG0000109", "OG0000128", "OG0000132", "OG0000135", "OG0000152", "OG0000186", "OG0000231", "OG0000248","OG0000279", "OG0000308", "OG0000319", "OG0000386", "OG0000389", "OG0000438", "OG0000474", "OG0000475","OG0000482", "OG0000508", "OG0000514", "OG0000526", "OG0000572", "OG0000586", "OG0000628", "OG0000633","OG0000639", "OG0000770", "OG0000830", "OG0000888", "OG0000951", "OG0001188", "OG0001258", "OG0001393","OG0001709", "OG0001730", "OG0001787", "OG0001843", "OG0001894", "OG0001907", "OG0002036", "OG0002059", "OG0002118", "OG0002217", "OG0002317", "OG0002572", "OG0002657", "OG0002830", "OG0002887", "OG0003560", "OG0003565", "OG0003743", "OG0003762", "OG0003866", "OG0004167", "OG0004226", "OG0004242", "OG0004487", "OG0004502", "OG0005320", "OG0005873", "OG0005960", "OG0006433", "OG0006698", "OG0007037", "OG0007305", "OG0007508", "OG0007666", "OG0008165", "OG0008973", "OG0009302", "OG0009906", "OG0011554", "OG0012091", "OG0012424", "OG0012503","OG0012895", "OG0013717", "OG0014122", "OG0014919", "OG0016137", "OG0016301", "OG0016501", "OG0016731", "OG0016893", "OG0017142", "OG0017252", "OG0017371", "OG0018544")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "lignin biosynthesis"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "cell wall development"
#Clase para genes desarrollo de plástidos
listofgenes <- c("OG0007900", "OG0008115", "OG0008778", "OG0010267", "OG0010287", "OG0011406", "OG0011691", "OG0011966", "OG0012226", "OG0012776", "OG0013061", "OG0013062", "OG0013838", "OG0015326", "OG0018866")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "plastid development"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "plastid development"
#Clase para genes asociados a plasmodesmata
listofgenes <- c("OG0000061", "OG0001811", "OG0002457", "OG0003113", "OG0004695", "OG0006047", "OG0006606", "OG0006942","OG0007682", "OG0009686", "OG0010657", "OG0012380", "OG0013917", "OG0015309", "OG0015940", "OG0016318","OG0016371", "OG0018245", "OG0019860")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "plasmodesmata"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "plasmodesmata"
#Clase para genes Desarrollo de hv (21)
listofgenes <- c("OG0000210", "OG0000398", "OG0001588", "OG0001885", "OG0001978", "OG0002523", "OG0002834", "OG0003287", "OG0003523", "OG0003915", "OG0007241", "OG0008202", "OG0010840", "OG0011147", "OG0012068", "OG0012184", "OG0014246", "OG0014482", "OG0015235", "OG0018305", "OG0018306")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "VB development"
#Clase para genes expansión de la pared celular (91)
listofgenes <- c("OG0000032", "OG0000053", "OG0000659", "OG0000722", "OG0000729", "OG0000748", "OG0000825", "OG0000891","OG0000901", "OG0001314", "OG0001549", "OG0001800", "OG0001858", "OG0002073", "OG0002195", "OG0002217","OG0002300", "OG0002366", "OG0002682", "OG0002884", "OG0003056", "OG0003091", "OG0003100", "OG0003234","OG0003338", "OG0003588", "OG0003789", "OG0003825", "OG0004375", "OG0004508", "OG0004519", "OG0004544","OG0005055", "OG0005083", "OG0005161", "OG0005363", "OG0005510", "OG0005762", "OG0006148", "OG0006323","OG0007028", "OG0007656", "OG0007869", "OG0008003", "OG0008059", "OG0008215", "OG0008259", "OG0008713",
"OG0008762", "OG0008878", "OG0008995", "OG0009225", "OG0009344", "OG0010160", "OG0010467", "OG0010544", "OG0010643", "OG0010669", "OG0010753", "OG0011075", "OG0011236", "OG0011772", "OG0011773", "OG0011888", "OG0011955", "OG0012524", "OG0012527", "OG0012818", "OG0013222", "OG0013231", "OG0013630", "OG0013734", "OG0013751", "OG0013888", "OG0013985", "OG0014053", "OG0014339", "OG0014434", "OG0014668", "OG0014819", "OG0016022", "OG0016240", "OG0016301", "OG0016544", "OG0016597", "OG0016856", "OG0016873", "OG0017049", "OG0017075", "OG0017208", "OG0017357", "OG0017394", "OG0018076", "OG0018417", "OG0018418", "OG0018439","OG0021756")
clases.SOM[clases.SOM$Feature %in% listofgenes,4] <- "cell wall expansion"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "cell wall development"
#Clase1 para fotosintesis
listofgenes <- c("OG0000081", "OG0000278", "OG0000783", "OG0000861", "OG0001093", "OG0001136", "OG0001317", "OG0001553","OG0001568", "OG0001652", "OG0001703", "OG0001724", "OG0001725", "OG0001814", "OG0002054", "OG0002068", "OG0002204", "OG0002462", "OG0002475", "OG0002605", "OG0003214", "OG0003469", "OG0003574", "OG0003592","OG0003643", "OG0003792", "OG0003966", "OG0003983", "OG0003992", "OG0004318", "OG0004496", "OG0004520","OG0004555", "OG0004571", "OG0004614", "OG0004657", "OG0004918", "OG0005003", "OG0005295", "OG0005335","OG0005399", "OG0005402", "OG0005462", "OG0005771", "OG0005782", "OG0005886", "OG0005896", "OG0005907",
"OG0006162", "OG0006224", "OG0006250", "OG0006426", "OG0006664", "OG0006715", "OG0006730", "OG0006771", "OG0006822", "OG0006924", "OG0006949", "OG0006989", "OG0007358", "OG0007437", "OG0007507", "OG0007618", "OG0007652", "OG0007822", "OG0007870", "OG0008135", "OG0008169", "OG0008260", "OG0008816", "OG0008830","OG0009019", "OG0009148", "OG0009162", "OG0009555", "OG0009577", "OG0009639", "OG0009902", "OG0010329", "OG0010635", "OG0010691", "OG0010890", "OG0011043", "OG0011222", "OG0011330", "OG0011719", "OG0011754","OG0011853", "OG0011875", "OG0011917", "OG0011936", "OG0012017", "OG0012212", "OG0012267", "OG0012298","OG0012301", "OG0012377", "OG0012444", "OG0012496", "OG0012671", "OG0013713", "OG0013743","OG0014227","OG0014374", "OG0015229", "OG0016280", "OG0019944")
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "photosynthesis"
#Clase para genes ciclo C4
listofgenes <- c("OG0000278","OG0014652","OG0005953","OG0000495","OG0009009","OG0011845",
"OG0002204","OG0001553","OG0012294","OG0001149","OG0003087","OG0005162")
clases.SOM[clases.SOM$Feature %in% listofgenes,3] <- "C4 cycle"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "photosynthesis"
#Clase para genes fotorespiración
listofgenes <- c("OG0000783","OG0007574","OG0000295","OG0000516","OG0012541",
"OG0003519","OG0004061","OG0000964","OG0003992","OG0007822",
"OG0005385","OG0011137","OG0004294","OG0002384","OG0004041",
"OG0006771","OG0001049")    #manually edited: enzimes in photorespiration
clases.SOM[clases.SOM$Feature %in% listofgenes,3] <- "photorespiration"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "photosynthesis"
#Clase para genes ciclo CBB (21 genes)
listofgenes <- c("OG0000622", "OG0000741", "OG0000759", "OG0000783", "OG0000861", "OG0001568", "OG0001652", "OG0002203","OG0002237", "OG0003654", "OG0004555", "OG0005782", "OG0006166", "OG0007543", "OG0007618", "OG0008019", "OG0010329", "OG0010691", "OG0012267", "OG0012671", "OG0014845")
clases.SOM[clases.SOM$Feature %in% listofgenes,3] <- "CBB cycle"
clases.SOM[clases.SOM$Feature %in% listofgenes,2] <- "photosynthesis"
View(clases.SOM)
#cargar subsets de genes
load(file="data/filt.SOM")
datSOM <- rbind(datAnatomy.means, TMM.means[filtrado.genes[[4]],])
View(datSOM)
write_xlsx(datSOM,"results/som 9757/datSOM.xlsx")  ##CAMBIAR NOMBRE ARCHIVO
library(writexl)
write_xlsx(datSOM,"results/som 9757/datSOM.xlsx")  ##CAMBIAR NOMBRE ARCHIVO
View(datSOM)
write.csv(datSOM,"results/som 9757/datSOM.csv")  ##CAMBIAR NOMBRE ARCHIVO
datSOM <- read.csv("../sompack_build/data/datSOM.csv", header = TRUE,
check.names = F,
sep= ",")
write.csv(datSOM,"results/som 9757/datSOM.csv")  ##CAMBIAR NOMBRE ARCHIVO
datSOM <- read.csv("../sompack_build/data/datSOM.csv", header = TRUE,
check.names = F,
sep= ",")
View(datSOM)
datSOM <- read.csv("../sompack_build/data/datSOM.csv", header = TRUE,
check.names = F,
sep= ",")
rownames(datSOM) <- datSOM[,1] #Use first column with names as row names
datSOM <- datSOM[,-1] #Remove column don't needed
View(datSOM)
usethis::use_data(datSOM)
View(clases.SOM)
datSOM <- rbind(datAnatomy.means, TMM.means[filtrado.genes[[4]],])
datSOM.log <- log(datSOM+1) #0.001  o 1
datSOM.scaled <- datSOM.log %>% t() %>% scale() %>% t()
datSOM.scaled <- as.matrix(datSOM.scaled)  #SOM necesita una matriz, no dataframe
hist(as.matrix(datSOM.log))
hist(datSOM.scaled,50)
datSOM.scaled <- na.omit(datSOM.scaled)
#seleccionar genes
clases.SOM <- clases.SOM[clases.SOM$Feature %in% row.names(datSOM.scaled),]
View(clases.SOM)
write.csv(clases.SOM,"results/som 9757/classSOM.csv")  ##CAMBIAR NOMBRE ARCHIVO
#Traits names and information (tags)
classSOM <- read.csv("../sompack_build/data/classSOM.csv", header = TRUE,
check.names = F,
sep= ",")
classSOM <- classSOM[,-1] #First column must be name of feature/gen
View(classSOM)
usethis::use_data(classSOM)
check()
usethis::use_vignette("my-vignette")
check()
library(evolSOM)
R.version
datSOM[1:5,]
load("C:/Users/santi/Dropbox (Personal)/Postdoc IAL-SINC/Postdoc/R/paquete/evolSOM/data/classSOM.rda")
View(classSOM)
#devtools::install_github("sanprochetto/evolSOM")
library(evolSOM)
#Traits expression data (genes + phenotype)
datSOM <- datSOM
rm(classSOM)
x <- classSOM
View(x)
#Traits names and information (tags)
classSOM <- classSOM #First column must be name of feature/gen
rm(x)
View(datSOM)
View(datSOM)
# Using scale_species() to scale data from each species individually.
datSOM.scaled <- scale_species(datSOM[,9:12], datSOM[,5:8], datSOM[,1:4],
rnames= row.names(datSOM),
species_names = c("C3", "PK", "C4"))
View(datSOM.scaled)
datSOM.scaled[["C3"]]
head(datSOM.scaled)
head()
?head()
datSOM.scaled <- scale_species(datSOM[,9:12], datSOM[,5:8], datSOM[,1:4],
rnames= row.names(datSOM),
species_names = c("C3", "PK", "C4"))
head(datSOM.scaled)
View(datSOM.scaled)
datSOM.scaled
summary(datSOM.scaled)
head(1:5, datSOM.scaled)
head(datSOM.scaled,5)
head(datSOM.scaled[[1]])
head(datSOM.scaled[[1]])
head(datSOM.scaled[[2]])
head(datSOM.scaled[[3]])
map_size <- opt_map_size(data = na.omit(datSOM.scaled[[1]]), #Reference species data (without NA)
threshold = 0.8,          #Max correlation allowed for Neurons
init_dim = 5, #this mean a grid of 5x5. The final dims should be lower. If dim1=dim2=init_dim, use a higher number for init_dim.
max_iterations = 50)  #"rlen" parameter when training model.SOM
map_size <- opt_map_size(data = na.omit(datSOM.scaled[[1]]), #Reference species data (without NA)
threshold = 0.8,          #Max correlation allowed for Neurons
init_dim = 5, #this mean a grid of 5x5. The final dims should be lower. If dim1=dim2=init_dim, use a higher number for init_dim.
max_iterations = 50)  #"rlen" parameter when training model.SOM
map_size
View(map_size)
map_size[["correlation_matrix"]]
map_size <- opt_map_size(data = na.omit(datSOM.scaled[[1]]), #Reference species data (without NA)
threshold = 0.8,          #Max correlation allowed for Neurons
init_dim = 5, #this mean a grid of 5x5. The final dims should be lower. If dim1=dim2=init_dim, use a higher number for init_dim.
max_iterations = 10)  #"rlen" parameter when training model.SOM
map_size
```{r}
train.data <- as.matrix(na.omit(datSOM.scaled[[1]])) #Select variables (reference species)
dim1<- map_size[["grid_dim1"]]
dim2<- map_size[["grid_dim2"]]
set.seed(100) #RNG Seed (for reproducibility)
init <- aweSOM::somInit(train.data, dim1, dim2) # aweSOM library
model.som <- kohonen::som(train.data,  # Train SOM (kohonen library)
grid = kohonen::somgrid(dim1, dim2, "hexagonal"),
rlen = 1000, alpha = c(0.1, 0.001),
dist.fcts = "euclidean", init = init)
#Use aweSOM library to visualize reference SOM
aweSOMplot(som = model.som, type = "Line", data = train.data,
variables = colnames(train.data),
values = "prototypes", size= 200)
#Use aweSOM library to visualize reference SOM
aweSOM::aweSOMplot(som = model.som, type = "Line", data = train.data,
variables = colnames(train.data),
values = "prototypes", size= 200)
mappings <- create_mappings(model = model.som,
train_data = train.data,
data_list = datSOM.scaled,
species_names = names(datSOM.scaled),
classes = classSOM)
View(mappings)
#Explore info inside mappings:
head(mappings[["classes"]], 15)
head(mappings[["neurons_sizes"]],15)
figure <- ggplot(mappings[["neurons_sizes"]], aes(x = as.character(Neuron), y = size, fill = species)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("#7ed977", "#008f77", "#009ca6" ))+
theme_bw()
figure
displacements<-  create_displacements(model.som,
delay_threshold = 0.75,
flip_threshold = -0.85)
View(displacements)
net_edges_C3toPK <- create_net_edges(mappings =  mappings, #object returned from mapping()
"Reference.sp", "PK",  #Species names: "start", "end"
add_disp_type = TRUE,  # choose to add displacement types
disp_type = displacements) #where to find disp types info
head(net_edges_C3toPK, 10)
displacements_graph(mappings = mappings,  # Looks for nodes inside mapping mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization purposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
###Photorespiration (25)
phr.genes <- c("OG0000295", "OG0000378", "OG0000783", "OG0000964", "OG0001962",
"OG0002384","OG0003519", "OG0003992", "OG0004041", "OG0004061",
"OG0004294", "OG0004978","OG0005385", "OG0005556", "OG0006771",
"OG0007574", "OG0007822", "OG0008057", "OG0010248", "OG0012065",
"OG0012541", "OG0000516", "OG0011137", "OG0001049", "OG0005515")
# Select genes in mappings[["classes"]]
selected_features <- mappings[["classes"]][mappings[["classes"]]$Feature %in% phr.genes,]
mappings_selected_features <- mappings
mappings_selected_features$classes <- selected_features
#Build net_edges for the list using create_net_edges function
net_edges_pk_phr <- create_net_edges(mappings_selected_features,
"C3", "PK",
add_disp_type = TRUE,
disp_type = displacements)
head(net_edges_pk_phr, 10)
visualize_graph(mappings = mappings_selected_features,
links = net_edges_pk_phr,
reference_species = "C3",
layout="grid",
#node_order=c(1,4,5,2,6,3),
node_order = NULL,
color_edges = "disp_type"
#color_scale=c("red")
)
displacements_graph(mappings = mappings_selected_features,
links = net_edges_pk_phr,
reference_species = "C3",
layout="grid",
#node_order=c(1,4,5,2,6,3),
node_order = NULL,
color_edges = "disp_type"
#color_scale=c("red")
)
library(ggplot2)
displacements_graph(mappings = mappings,  # Looks for nodes inside mapping mapping[["neurons_sizes"]]
links =  net_edges_C3toPK, #the arrows in the graph
reference_species = "C3", #used for determine the size of the neurons
layout="circle",  #from igraph: circle, linear, grid, etc.
node_order=c(1,4,5,2,6,3),  #use a specific order for visualization purposes
#node_order = NULL,
color_edges = "disp_type",  #Color the arrows by...
color_scale=c("red","blue","green", "yellow", "orange", "violet")
)
#devtools::install_github("sanprochetto/evolSOM")
library(evolSOM)
library(ggplot2)
figure <- ggplot(mappings[["neurons_sizes"]], aes(x = as.character(Neuron), y = size, fill = species)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("#7ed977", "#008f77", "#009ca6" ))+
theme_bw()
figure
library(evolSOM)
check()
document()
document()
check()
devtools::load_all()
install(build_vignettes = TRUE)
devtools::load_all()
install(build_vignettes = TRUE)
check()
check()
library(evolSOM)
check()
library(devtools)
check()
document()
load_all()
check()
git init
